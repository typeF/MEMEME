// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  forum: (where?: ForumWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  thread: (where?: ThreadWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  forum: (where: ForumWhereUniqueInput) => ForumPromise;
  forums: (
    args?: {
      where?: ForumWhereInput;
      orderBy?: ForumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Forum>;
  forumsConnection: (
    args?: {
      where?: ForumWhereInput;
      orderBy?: ForumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ForumConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  thread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  threads: (
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Thread>;
  threadsConnection: (
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ThreadConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createForum: (data: ForumCreateInput) => ForumPromise;
  updateForum: (
    args: { data: ForumUpdateInput; where: ForumWhereUniqueInput }
  ) => ForumPromise;
  updateManyForums: (
    args: { data: ForumUpdateManyMutationInput; where?: ForumWhereInput }
  ) => BatchPayloadPromise;
  upsertForum: (
    args: {
      where: ForumWhereUniqueInput;
      create: ForumCreateInput;
      update: ForumUpdateInput;
    }
  ) => ForumPromise;
  deleteForum: (where: ForumWhereUniqueInput) => ForumPromise;
  deleteManyForums: (where?: ForumWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createThread: (data: ThreadCreateInput) => ThreadPromise;
  updateThread: (
    args: { data: ThreadUpdateInput; where: ThreadWhereUniqueInput }
  ) => ThreadPromise;
  updateManyThreads: (
    args: { data: ThreadUpdateManyMutationInput; where?: ThreadWhereInput }
  ) => BatchPayloadPromise;
  upsertThread: (
    args: {
      where: ThreadWhereUniqueInput;
      create: ThreadCreateInput;
      update: ThreadUpdateInput;
    }
  ) => ThreadPromise;
  deleteThread: (where: ThreadWhereUniqueInput) => ThreadPromise;
  deleteManyThreads: (where?: ThreadWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  forum: (
    where?: ForumSubscriptionWhereInput
  ) => ForumSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  thread: (
    where?: ThreadSubscriptionWhereInput
  ) => ThreadSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ThreadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "threadnumber_ASC"
  | "threadnumber_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "postnumber_ASC"
  | "postnumber_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ForumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ForumWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ThreadWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  threadnumber?: Int;
  threadnumber_not?: Int;
  threadnumber_in?: Int[] | Int;
  threadnumber_not_in?: Int[] | Int;
  threadnumber_lt?: Int;
  threadnumber_lte?: Int;
  threadnumber_gt?: Int;
  threadnumber_gte?: Int;
  subForum?: ForumWhereInput;
  author?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ThreadWhereInput[] | ThreadWhereInput;
  OR?: ThreadWhereInput[] | ThreadWhereInput;
  NOT?: ThreadWhereInput[] | ThreadWhereInput;
}

export interface ForumWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  threads_every?: ThreadWhereInput;
  threads_some?: ThreadWhereInput;
  threads_none?: ThreadWhereInput;
  AND?: ForumWhereInput[] | ForumWhereInput;
  OR?: ForumWhereInput[] | ForumWhereInput;
  NOT?: ForumWhereInput[] | ForumWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  threads_every?: ThreadWhereInput;
  threads_some?: ThreadWhereInput;
  threads_none?: ThreadWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  postnumber?: Int;
  postnumber_not?: Int;
  postnumber_in?: Int[] | Int;
  postnumber_not_in?: Int[] | Int;
  postnumber_lt?: Int;
  postnumber_lte?: Int;
  postnumber_gt?: Int;
  postnumber_gte?: Int;
  author?: UserWhereInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  thread?: ThreadWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type ThreadWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ForumCreateInput {
  name: String;
  threads?: ThreadCreateManyWithoutSubForumInput;
}

export interface ThreadCreateManyWithoutSubForumInput {
  create?:
    | ThreadCreateWithoutSubForumInput[]
    | ThreadCreateWithoutSubForumInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
}

export interface ThreadCreateWithoutSubForumInput {
  threadnumber: Int;
  author: UserCreateOneWithoutThreadsInput;
  title: String;
  posts?: PostCreateManyWithoutThreadInput;
}

export interface UserCreateOneWithoutThreadsInput {
  create?: UserCreateWithoutThreadsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutThreadsInput {
  username: String;
  email: String;
  password: String;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutAuthorInput {
  postnumber: Int;
  content: String;
  thread: ThreadCreateOneWithoutPostsInput;
}

export interface ThreadCreateOneWithoutPostsInput {
  create?: ThreadCreateWithoutPostsInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadCreateWithoutPostsInput {
  threadnumber: Int;
  subForum: ForumCreateOneWithoutThreadsInput;
  author: UserCreateOneWithoutThreadsInput;
  title: String;
}

export interface ForumCreateOneWithoutThreadsInput {
  create?: ForumCreateWithoutThreadsInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumCreateWithoutThreadsInput {
  name: String;
}

export interface PostCreateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutThreadInput {
  postnumber: Int;
  author: UserCreateOneWithoutPostsInput;
  content: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  username: String;
  email: String;
  password: String;
  threads?: ThreadCreateManyWithoutAuthorInput;
}

export interface ThreadCreateManyWithoutAuthorInput {
  create?: ThreadCreateWithoutAuthorInput[] | ThreadCreateWithoutAuthorInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
}

export interface ThreadCreateWithoutAuthorInput {
  threadnumber: Int;
  subForum: ForumCreateOneWithoutThreadsInput;
  title: String;
  posts?: PostCreateManyWithoutThreadInput;
}

export interface ForumUpdateInput {
  name?: String;
  threads?: ThreadUpdateManyWithoutSubForumInput;
}

export interface ThreadUpdateManyWithoutSubForumInput {
  create?:
    | ThreadCreateWithoutSubForumInput[]
    | ThreadCreateWithoutSubForumInput;
  delete?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  set?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  disconnect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  update?:
    | ThreadUpdateWithWhereUniqueWithoutSubForumInput[]
    | ThreadUpdateWithWhereUniqueWithoutSubForumInput;
  upsert?:
    | ThreadUpsertWithWhereUniqueWithoutSubForumInput[]
    | ThreadUpsertWithWhereUniqueWithoutSubForumInput;
  deleteMany?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  updateMany?:
    | ThreadUpdateManyWithWhereNestedInput[]
    | ThreadUpdateManyWithWhereNestedInput;
}

export interface ThreadUpdateWithWhereUniqueWithoutSubForumInput {
  where: ThreadWhereUniqueInput;
  data: ThreadUpdateWithoutSubForumDataInput;
}

export interface ThreadUpdateWithoutSubForumDataInput {
  threadnumber?: Int;
  author?: UserUpdateOneRequiredWithoutThreadsInput;
  title?: String;
  posts?: PostUpdateManyWithoutThreadInput;
}

export interface UserUpdateOneRequiredWithoutThreadsInput {
  create?: UserCreateWithoutThreadsInput;
  update?: UserUpdateWithoutThreadsDataInput;
  upsert?: UserUpsertWithoutThreadsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutThreadsDataInput {
  username?: String;
  email?: String;
  password?: String;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  postnumber?: Int;
  content?: String;
  thread?: ThreadUpdateOneRequiredWithoutPostsInput;
}

export interface ThreadUpdateOneRequiredWithoutPostsInput {
  create?: ThreadCreateWithoutPostsInput;
  update?: ThreadUpdateWithoutPostsDataInput;
  upsert?: ThreadUpsertWithoutPostsInput;
  connect?: ThreadWhereUniqueInput;
}

export interface ThreadUpdateWithoutPostsDataInput {
  threadnumber?: Int;
  subForum?: ForumUpdateOneRequiredWithoutThreadsInput;
  author?: UserUpdateOneRequiredWithoutThreadsInput;
  title?: String;
}

export interface ForumUpdateOneRequiredWithoutThreadsInput {
  create?: ForumCreateWithoutThreadsInput;
  update?: ForumUpdateWithoutThreadsDataInput;
  upsert?: ForumUpsertWithoutThreadsInput;
  connect?: ForumWhereUniqueInput;
}

export interface ForumUpdateWithoutThreadsDataInput {
  name?: String;
}

export interface ForumUpsertWithoutThreadsInput {
  update: ForumUpdateWithoutThreadsDataInput;
  create: ForumCreateWithoutThreadsInput;
}

export interface ThreadUpsertWithoutPostsInput {
  update: ThreadUpdateWithoutPostsDataInput;
  create: ThreadCreateWithoutPostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  postnumber?: Int;
  postnumber_not?: Int;
  postnumber_in?: Int[] | Int;
  postnumber_not_in?: Int[] | Int;
  postnumber_lt?: Int;
  postnumber_lte?: Int;
  postnumber_gt?: Int;
  postnumber_gte?: Int;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  postnumber?: Int;
  content?: String;
}

export interface UserUpsertWithoutThreadsInput {
  update: UserUpdateWithoutThreadsDataInput;
  create: UserCreateWithoutThreadsInput;
}

export interface PostUpdateManyWithoutThreadInput {
  create?: PostCreateWithoutThreadInput[] | PostCreateWithoutThreadInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutThreadInput[]
    | PostUpdateWithWhereUniqueWithoutThreadInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutThreadInput[]
    | PostUpsertWithWhereUniqueWithoutThreadInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutThreadDataInput;
}

export interface PostUpdateWithoutThreadDataInput {
  postnumber?: Int;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  content?: String;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  username?: String;
  email?: String;
  password?: String;
  threads?: ThreadUpdateManyWithoutAuthorInput;
}

export interface ThreadUpdateManyWithoutAuthorInput {
  create?: ThreadCreateWithoutAuthorInput[] | ThreadCreateWithoutAuthorInput;
  delete?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  connect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  set?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  disconnect?: ThreadWhereUniqueInput[] | ThreadWhereUniqueInput;
  update?:
    | ThreadUpdateWithWhereUniqueWithoutAuthorInput[]
    | ThreadUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | ThreadUpsertWithWhereUniqueWithoutAuthorInput[]
    | ThreadUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  updateMany?:
    | ThreadUpdateManyWithWhereNestedInput[]
    | ThreadUpdateManyWithWhereNestedInput;
}

export interface ThreadUpdateWithWhereUniqueWithoutAuthorInput {
  where: ThreadWhereUniqueInput;
  data: ThreadUpdateWithoutAuthorDataInput;
}

export interface ThreadUpdateWithoutAuthorDataInput {
  threadnumber?: Int;
  subForum?: ForumUpdateOneRequiredWithoutThreadsInput;
  title?: String;
  posts?: PostUpdateManyWithoutThreadInput;
}

export interface ThreadUpsertWithWhereUniqueWithoutAuthorInput {
  where: ThreadWhereUniqueInput;
  update: ThreadUpdateWithoutAuthorDataInput;
  create: ThreadCreateWithoutAuthorInput;
}

export interface ThreadScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  threadnumber?: Int;
  threadnumber_not?: Int;
  threadnumber_in?: Int[] | Int;
  threadnumber_not_in?: Int[] | Int;
  threadnumber_lt?: Int;
  threadnumber_lte?: Int;
  threadnumber_gt?: Int;
  threadnumber_gte?: Int;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  OR?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
  NOT?: ThreadScalarWhereInput[] | ThreadScalarWhereInput;
}

export interface ThreadUpdateManyWithWhereNestedInput {
  where: ThreadScalarWhereInput;
  data: ThreadUpdateManyDataInput;
}

export interface ThreadUpdateManyDataInput {
  threadnumber?: Int;
  title?: String;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutThreadInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutThreadDataInput;
  create: PostCreateWithoutThreadInput;
}

export interface ThreadUpsertWithWhereUniqueWithoutSubForumInput {
  where: ThreadWhereUniqueInput;
  update: ThreadUpdateWithoutSubForumDataInput;
  create: ThreadCreateWithoutSubForumInput;
}

export interface ForumUpdateManyMutationInput {
  name?: String;
}

export interface PostCreateInput {
  postnumber: Int;
  author: UserCreateOneWithoutPostsInput;
  content: String;
  thread: ThreadCreateOneWithoutPostsInput;
}

export interface PostUpdateInput {
  postnumber?: Int;
  author?: UserUpdateOneRequiredWithoutPostsInput;
  content?: String;
  thread?: ThreadUpdateOneRequiredWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  postnumber?: Int;
  content?: String;
}

export interface ThreadCreateInput {
  threadnumber: Int;
  subForum: ForumCreateOneWithoutThreadsInput;
  author: UserCreateOneWithoutThreadsInput;
  title: String;
  posts?: PostCreateManyWithoutThreadInput;
}

export interface ThreadUpdateInput {
  threadnumber?: Int;
  subForum?: ForumUpdateOneRequiredWithoutThreadsInput;
  author?: UserUpdateOneRequiredWithoutThreadsInput;
  title?: String;
  posts?: PostUpdateManyWithoutThreadInput;
}

export interface ThreadUpdateManyMutationInput {
  threadnumber?: Int;
  title?: String;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password: String;
  threads?: ThreadCreateManyWithoutAuthorInput;
  posts?: PostCreateManyWithoutAuthorInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  threads?: ThreadUpdateManyWithoutAuthorInput;
  posts?: PostUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
}

export interface ForumSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ForumWhereInput;
  AND?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
  OR?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
  NOT?: ForumSubscriptionWhereInput[] | ForumSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface ThreadSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThreadWhereInput;
  AND?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  OR?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
  NOT?: ThreadSubscriptionWhereInput[] | ThreadSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Forum {
  id: ID_Output;
  name: String;
}

export interface ForumPromise extends Promise<Forum>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  threads: <T = FragmentableArray<Thread>>(
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ForumSubscription
  extends Promise<AsyncIterator<Forum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  threads: <T = Promise<AsyncIterator<ThreadSubscription>>>(
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Thread {
  id: ID_Output;
  threadnumber: Int;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ThreadPromise extends Promise<Thread>, Fragmentable {
  id: () => Promise<ID_Output>;
  threadnumber: () => Promise<Int>;
  subForum: <T = ForumPromise>() => T;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ThreadSubscription
  extends Promise<AsyncIterator<Thread>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  threadnumber: () => Promise<AsyncIterator<Int>>;
  subForum: <T = ForumSubscription>() => T;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  threads: <T = FragmentableArray<Thread>>(
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  threads: <T = Promise<AsyncIterator<ThreadSubscription>>>(
    args?: {
      where?: ThreadWhereInput;
      orderBy?: ThreadOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Post {
  id: ID_Output;
  postnumber: Int;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  postnumber: () => Promise<Int>;
  author: <T = UserPromise>() => T;
  content: () => Promise<String>;
  thread: <T = ThreadPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postnumber: () => Promise<AsyncIterator<Int>>;
  author: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  thread: <T = ThreadSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ForumConnection {
  pageInfo: PageInfo;
  edges: ForumEdge[];
}

export interface ForumConnectionPromise
  extends Promise<ForumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForumEdge>>() => T;
  aggregate: <T = AggregateForumPromise>() => T;
}

export interface ForumConnectionSubscription
  extends Promise<AsyncIterator<ForumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForumSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ForumEdge {
  node: Forum;
  cursor: String;
}

export interface ForumEdgePromise extends Promise<ForumEdge>, Fragmentable {
  node: <T = ForumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForumEdgeSubscription
  extends Promise<AsyncIterator<ForumEdge>>,
    Fragmentable {
  node: <T = ForumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForum {
  count: Int;
}

export interface AggregateForumPromise
  extends Promise<AggregateForum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForumSubscription
  extends Promise<AsyncIterator<AggregateForum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThreadConnection {
  pageInfo: PageInfo;
  edges: ThreadEdge[];
}

export interface ThreadConnectionPromise
  extends Promise<ThreadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThreadEdge>>() => T;
  aggregate: <T = AggregateThreadPromise>() => T;
}

export interface ThreadConnectionSubscription
  extends Promise<AsyncIterator<ThreadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThreadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThreadSubscription>() => T;
}

export interface ThreadEdge {
  node: Thread;
  cursor: String;
}

export interface ThreadEdgePromise extends Promise<ThreadEdge>, Fragmentable {
  node: <T = ThreadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThreadEdgeSubscription
  extends Promise<AsyncIterator<ThreadEdge>>,
    Fragmentable {
  node: <T = ThreadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateThread {
  count: Int;
}

export interface AggregateThreadPromise
  extends Promise<AggregateThread>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThreadSubscription
  extends Promise<AsyncIterator<AggregateThread>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ForumSubscriptionPayload {
  mutation: MutationType;
  node: Forum;
  updatedFields: String[];
  previousValues: ForumPreviousValues;
}

export interface ForumSubscriptionPayloadPromise
  extends Promise<ForumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForumPreviousValuesPromise>() => T;
}

export interface ForumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForumPreviousValuesSubscription>() => T;
}

export interface ForumPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ForumPreviousValuesPromise
  extends Promise<ForumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ForumPreviousValuesSubscription
  extends Promise<AsyncIterator<ForumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  postnumber: Int;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  postnumber: () => Promise<Int>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  postnumber: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ThreadSubscriptionPayload {
  mutation: MutationType;
  node: Thread;
  updatedFields: String[];
  previousValues: ThreadPreviousValues;
}

export interface ThreadSubscriptionPayloadPromise
  extends Promise<ThreadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThreadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThreadPreviousValuesPromise>() => T;
}

export interface ThreadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThreadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThreadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThreadPreviousValuesSubscription>() => T;
}

export interface ThreadPreviousValues {
  id: ID_Output;
  threadnumber: Int;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ThreadPreviousValuesPromise
  extends Promise<ThreadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  threadnumber: () => Promise<Int>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ThreadPreviousValuesSubscription
  extends Promise<AsyncIterator<ThreadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  threadnumber: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Forum",
    embedded: false
  },
  {
    name: "Thread",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
